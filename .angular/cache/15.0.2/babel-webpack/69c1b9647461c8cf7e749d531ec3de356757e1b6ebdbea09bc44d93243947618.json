{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../crm/crm.service\";\nexport class AuthService {\n  constructor(crmAPI) {\n    this.isLogedin = false;\n  }\n  ngOnInit() {}\n  SetLogin(token) {\n    localStorage.setItem(\"JWT-Token\", token);\n    this.isLogedin = true;\n  }\n  SetLogout() {\n    localStorage.removeItem(\"JWT-Token\");\n    this.isLogedin = false;\n  }\n  validateJWT(token) {\n    return new Promise((resolve, reject) => {\n      resolve(true);\n      reject(\"error\");\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.CrmService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,WAAW;EAGtBC,YAAYC,MAAiB;IAFtB,cAAS,GAAS,KAAK;EAI9B;EACAC,QAAQ,IAER;EAEQC,QAAQ,CAACC,KAAY;IAE3BC,YAAY,CAACC,OAAO,CAAC,WAAW,EAACF,KAAK,CAAC;IACvC,IAAI,CAACG,SAAS,GAAC,IAAI;EACrB;EACQC,SAAS;IAEfH,YAAY,CAACI,UAAU,CAAC,WAAW,CAAC;IACpC,IAAI,CAACF,SAAS,GAAC,KAAK;EACtB;EAEQG,WAAW,CAACN,KAAY;IAE9B,OAAO,IAAIO,OAAO,CAAC,CAACC,OAAO,EAACC,MAAM,KAAG;MACpCD,OAAO,CAAC,IAAI,CAAC;MACbC,MAAM,CAAC,OAAO,CAAC;IAChB,CAAC,CAAC;EACJ;;;mBA3BWd,WAAW;AAAA;;SAAXA,WAAW;EAAAe,SAAXf,WAAW;EAAAgB,YAFV;AAAM","names":["AuthService","constructor","crmAPI","ngOnInit","SetLogin","token","localStorage","setItem","isLogedin","SetLogout","removeItem","validateJWT","Promise","resolve","reject","factory","providedIn"],"sourceRoot":"","sources":["E:\\TheShippingSpot\\client\\src\\services\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { CrmService } from '../crm/crm.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService implements OnInit {\n  public isLogedin:boolean=false;\n\n  constructor(crmAPI:CrmService) {\n\n  }\n  ngOnInit(): void {\n\n  }\n\n  private SetLogin(token:string)\n  {\n    localStorage.setItem(\"JWT-Token\",token);\n    this.isLogedin=true;\n  }\n  private SetLogout()\n  {\n    localStorage.removeItem(\"JWT-Token\");\n    this.isLogedin=false;\n  }\n\n  private validateJWT(token:string)\n  {\n    return new Promise((resolve,reject)=>{\n     resolve(true);\n     reject(\"error\");\n    });\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}