{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { AuthUtils } from 'app/core/auth/auth.utils';\nlet AuthService = class AuthService {\n  /**\r\n   * Constructor\r\n   */\n  constructor(_httpClient, _userService) {\n    this._httpClient = _httpClient;\n    this._userService = _userService;\n    this._authenticated = false;\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Accessors\n  // -----------------------------------------------------------------------------------------------------\n  /**\r\n   * Setter & getter for access token\r\n   */\n  set accessToken(token) {\n    localStorage.setItem('accessToken', token);\n  }\n  get accessToken() {\n    var _a;\n    return (_a = localStorage.getItem('accessToken')) !== null && _a !== void 0 ? _a : '';\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\r\n   * Forgot password\r\n   *\r\n   * @param email\r\n   */\n  forgotPassword(email) {\n    return this._httpClient.post('api/auth/forgot-password', email);\n  }\n  /**\r\n   * Reset password\r\n   *\r\n   * @param password\r\n   */\n  resetPassword(password) {\n    return this._httpClient.post('api/auth/reset-password', password);\n  }\n  /**\r\n   * Sign in\r\n   *\r\n   * @param credentials\r\n   */\n  signIn(credentials) {\n    // Throw error, if the user is already logged in\n    if (this._authenticated) {\n      return throwError('User is already logged in.');\n    }\n    return this._httpClient.post('api/auth/sign-in', credentials).pipe(switchMap(response => {\n      // Store the access token in the local storage\n      this.accessToken = response.accessToken;\n      // Set the authenticated flag to true\n      this._authenticated = true;\n      // Store the user on the user service\n      this._userService.user = response.user;\n      // Return a new observable with the response\n      return of(response);\n    }));\n  }\n  /**\r\n   * Sign in using the access token\r\n   */\n  signInUsingToken() {\n    // Renew token\n    return this._httpClient.post('api/auth/refresh-access-token', {\n      accessToken: this.accessToken\n    }).pipe(catchError(() =>\n    // Return false\n    of(false)), switchMap(response => {\n      // Store the access token in the local storage\n      this.accessToken = response.accessToken;\n      // Set the authenticated flag to true\n      this._authenticated = true;\n      // Store the user on the user service\n      this._userService.user = response.user;\n      // Return true\n      return of(true);\n    }));\n  }\n  /**\r\n   * Sign out\r\n   */\n  signOut() {\n    // Remove the access token from the local storage\n    localStorage.removeItem('accessToken');\n    // Set the authenticated flag to false\n    this._authenticated = false;\n    // Return the observable\n    return of(true);\n  }\n  /**\r\n   * Sign up\r\n   *\r\n   * @param user\r\n   */\n  signUp(user) {\n    return this._httpClient.post('api/auth/sign-up', user);\n  }\n  /**\r\n   * Unlock session\r\n   *\r\n   * @param credentials\r\n   */\n  unlockSession(credentials) {\n    return this._httpClient.post('api/auth/unlock-session', credentials);\n  }\n  /**\r\n   * Check the authentication status\r\n   */\n  check() {\n    // Check if the user is logged in\n    if (this._authenticated) {\n      return of(true);\n    }\n    // Check the access token availability\n    if (!this.accessToken) {\n      return of(false);\n    }\n    // Check the access token expire date\n    if (AuthUtils.isTokenExpired(this.accessToken)) {\n      return of(false);\n    }\n    // If the access token exists and it didn't expire, sign in using it\n    return this.signInUsingToken();\n  }\n};\nAuthService = __decorate([Injectable()], AuthService);\nexport { AuthService };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAAqBC,EAAE,EAAEC,UAAU,QAAQ,MAAM;AACjD,SAASC,UAAU,EAAEC,SAAS,QAAQ,gBAAgB;AACtD,SAASC,SAAS,QAAQ,0BAA0B;AAI7C,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EAIpB;;;EAGAC,YACYC,WAAuB,EACvBC,YAAyB;IADzB,gBAAW,GAAXD,WAAW;IACX,iBAAY,GAAZC,YAAY;IAPhB,mBAAc,GAAY,KAAK;EAUvC;EAEA;EACA;EACA;EAEA;;;EAGA,IAAIC,WAAW,CAACC,KAAa;IAEzBC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,KAAK,CAAC;EAC9C;EAEA,IAAID,WAAW;;IAEX,OAAO,kBAAY,CAACI,OAAO,CAAC,aAAa,CAAC,mCAAI,EAAE;EACpD;EAEA;EACA;EACA;EAEA;;;;;EAKAC,cAAc,CAACC,KAAa;IAExB,OAAO,IAAI,CAACR,WAAW,CAACS,IAAI,CAAC,0BAA0B,EAAED,KAAK,CAAC;EACnE;EAEA;;;;;EAKAE,aAAa,CAACC,QAAgB;IAE1B,OAAO,IAAI,CAACX,WAAW,CAACS,IAAI,CAAC,yBAAyB,EAAEE,QAAQ,CAAC;EACrE;EAEA;;;;;EAKAC,MAAM,CAACC,WAAgD;IAEnD;IACA,IAAK,IAAI,CAACC,cAAc,EACxB;MACI,OAAOpB,UAAU,CAAC,4BAA4B,CAAC;;IAGnD,OAAO,IAAI,CAACM,WAAW,CAACS,IAAI,CAAC,kBAAkB,EAAEI,WAAW,CAAC,CAACE,IAAI,CAC9DnB,SAAS,CAAEoB,QAAa,IAAI;MAExB;MACA,IAAI,CAACd,WAAW,GAAGc,QAAQ,CAACd,WAAW;MAEvC;MACA,IAAI,CAACY,cAAc,GAAG,IAAI;MAE1B;MACA,IAAI,CAACb,YAAY,CAACgB,IAAI,GAAGD,QAAQ,CAACC,IAAI;MAEtC;MACA,OAAOxB,EAAE,CAACuB,QAAQ,CAAC;IACvB,CAAC,CAAC,CACL;EACL;EAEA;;;EAGAE,gBAAgB;IAEZ;IACA,OAAO,IAAI,CAAClB,WAAW,CAACS,IAAI,CAAC,+BAA+B,EAAE;MAC1DP,WAAW,EAAE,IAAI,CAACA;KACrB,CAAC,CAACa,IAAI,CACHpB,UAAU,CAAC;IAEP;IACAF,EAAE,CAAC,KAAK,CAAC,CACZ,EACDG,SAAS,CAAEoB,QAAa,IAAI;MAExB;MACA,IAAI,CAACd,WAAW,GAAGc,QAAQ,CAACd,WAAW;MAEvC;MACA,IAAI,CAACY,cAAc,GAAG,IAAI;MAE1B;MACA,IAAI,CAACb,YAAY,CAACgB,IAAI,GAAGD,QAAQ,CAACC,IAAI;MAEtC;MACA,OAAOxB,EAAE,CAAC,IAAI,CAAC;IACnB,CAAC,CAAC,CACL;EACL;EAEA;;;EAGA0B,OAAO;IAEH;IACAf,YAAY,CAACgB,UAAU,CAAC,aAAa,CAAC;IAEtC;IACA,IAAI,CAACN,cAAc,GAAG,KAAK;IAE3B;IACA,OAAOrB,EAAE,CAAC,IAAI,CAAC;EACnB;EAEA;;;;;EAKA4B,MAAM,CAACJ,IAAwE;IAE3E,OAAO,IAAI,CAACjB,WAAW,CAACS,IAAI,CAAC,kBAAkB,EAAEQ,IAAI,CAAC;EAC1D;EAEA;;;;;EAKAK,aAAa,CAACT,WAAgD;IAE1D,OAAO,IAAI,CAACb,WAAW,CAACS,IAAI,CAAC,yBAAyB,EAAEI,WAAW,CAAC;EACxE;EAEA;;;EAGAU,KAAK;IAED;IACA,IAAK,IAAI,CAACT,cAAc,EACxB;MACI,OAAOrB,EAAE,CAAC,IAAI,CAAC;;IAGnB;IACA,IAAK,CAAC,IAAI,CAACS,WAAW,EACtB;MACI,OAAOT,EAAE,CAAC,KAAK,CAAC;;IAGpB;IACA,IAAKI,SAAS,CAAC2B,cAAc,CAAC,IAAI,CAACtB,WAAW,CAAC,EAC/C;MACI,OAAOT,EAAE,CAAC,KAAK,CAAC;;IAGpB;IACA,OAAO,IAAI,CAACyB,gBAAgB,EAAE;EAClC;CACH;AAlLYpB,WAAW,eADvBN,UAAU,EAAE,GACAM,WAAW,CAkLvB;SAlLYA,WAAW","names":["Injectable","of","throwError","catchError","switchMap","AuthUtils","AuthService","constructor","_httpClient","_userService","accessToken","token","localStorage","setItem","getItem","forgotPassword","email","post","resetPassword","password","signIn","credentials","_authenticated","pipe","response","user","signInUsingToken","signOut","removeItem","signUp","unlockSession","check","isTokenExpired"],"sourceRoot":"","sources":["E:\\TheShippingSpot\\template\\fuse-admin-full-version-13.6.2 2\\fuse-admin-full-version-13.6.2\\fuse-angular-demo\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { AuthUtils } from 'app/core/auth/auth.utils';\nimport { UserService } from 'app/core/user/user.service';\n\n@Injectable()\nexport class AuthService\n{\n    private _authenticated: boolean = false;\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _httpClient: HttpClient,\n        private _userService: UserService\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Setter & getter for access token\n     */\n    set accessToken(token: string)\n    {\n        localStorage.setItem('accessToken', token);\n    }\n\n    get accessToken(): string\n    {\n        return localStorage.getItem('accessToken') ?? '';\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Forgot password\n     *\n     * @param email\n     */\n    forgotPassword(email: string): Observable<any>\n    {\n        return this._httpClient.post('api/auth/forgot-password', email);\n    }\n\n    /**\n     * Reset password\n     *\n     * @param password\n     */\n    resetPassword(password: string): Observable<any>\n    {\n        return this._httpClient.post('api/auth/reset-password', password);\n    }\n\n    /**\n     * Sign in\n     *\n     * @param credentials\n     */\n    signIn(credentials: { email: string; password: string }): Observable<any>\n    {\n        // Throw error, if the user is already logged in\n        if ( this._authenticated )\n        {\n            return throwError('User is already logged in.');\n        }\n\n        return this._httpClient.post('api/auth/sign-in', credentials).pipe(\n            switchMap((response: any) => {\n\n                // Store the access token in the local storage\n                this.accessToken = response.accessToken;\n\n                // Set the authenticated flag to true\n                this._authenticated = true;\n\n                // Store the user on the user service\n                this._userService.user = response.user;\n\n                // Return a new observable with the response\n                return of(response);\n            })\n        );\n    }\n\n    /**\n     * Sign in using the access token\n     */\n    signInUsingToken(): Observable<any>\n    {\n        // Renew token\n        return this._httpClient.post('api/auth/refresh-access-token', {\n            accessToken: this.accessToken\n        }).pipe(\n            catchError(() =>\n\n                // Return false\n                of(false)\n            ),\n            switchMap((response: any) => {\n\n                // Store the access token in the local storage\n                this.accessToken = response.accessToken;\n\n                // Set the authenticated flag to true\n                this._authenticated = true;\n\n                // Store the user on the user service\n                this._userService.user = response.user;\n\n                // Return true\n                return of(true);\n            })\n        );\n    }\n\n    /**\n     * Sign out\n     */\n    signOut(): Observable<any>\n    {\n        // Remove the access token from the local storage\n        localStorage.removeItem('accessToken');\n\n        // Set the authenticated flag to false\n        this._authenticated = false;\n\n        // Return the observable\n        return of(true);\n    }\n\n    /**\n     * Sign up\n     *\n     * @param user\n     */\n    signUp(user: { name: string; email: string; password: string; company: string }): Observable<any>\n    {\n        return this._httpClient.post('api/auth/sign-up', user);\n    }\n\n    /**\n     * Unlock session\n     *\n     * @param credentials\n     */\n    unlockSession(credentials: { email: string; password: string }): Observable<any>\n    {\n        return this._httpClient.post('api/auth/unlock-session', credentials);\n    }\n\n    /**\n     * Check the authentication status\n     */\n    check(): Observable<boolean>\n    {\n        // Check if the user is logged in\n        if ( this._authenticated )\n        {\n            return of(true);\n        }\n\n        // Check the access token availability\n        if ( !this.accessToken )\n        {\n            return of(false);\n        }\n\n        // Check the access token expire date\n        if ( AuthUtils.isTokenExpired(this.accessToken) )\n        {\n            return of(false);\n        }\n\n        // If the access token exists and it didn't expire, sign in using it\n        return this.signInUsingToken();\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}